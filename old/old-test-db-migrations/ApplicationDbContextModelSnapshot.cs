// <auto-generated />
using System;
using ClassLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClassLibrary.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.CommandModel", b =>
                {
                    b.Property<int>("commandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("ServerCommandsserverCommandId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("commandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("enabled")
                        .HasColumnType("bit");

                    b.Property<decimal>("modifiedById")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("serverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("totalUses")
                        .HasColumnType("int");

                    b.HasKey("commandId");

                    b.HasIndex("ServerCommandsserverCommandId");

                    b.ToTable("CommandModels");
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.CryptoModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("coinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<float>("price1")
                        .HasColumnType("real");

                    b.Property<float>("price2")
                        .HasColumnType("real");

                    b.Property<float>("price3")
                        .HasColumnType("real");

                    b.Property<float>("price4")
                        .HasColumnType("real");

                    b.Property<float>("price5")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("CryptoModels");
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.DashItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UserDashid")
                        .HasColumnType("int");

                    b.Property<int>("command")
                        .HasColumnType("int");

                    b.Property<string>("result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("serverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("userId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("UserDashid");

                    b.ToTable("DashItems");
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.ReminderModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("additionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("createdById")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("createdInServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int?>("currentRepeatNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("endDate")
                        .HasColumnType("bit");

                    b.Property<int?>("executionIncrement")
                        .HasColumnType("int");

                    b.Property<DateTime>("executionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("hasExecuted")
                        .HasColumnType("bit");

                    b.Property<int?>("numberOfRepeats")
                        .HasColumnType("int");

                    b.Property<Guid>("reminderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("repeatIncrement")
                        .HasColumnType("int");

                    b.Property<bool?>("shouldRepeat")
                        .HasColumnType("bit");

                    b.Property<DateTime>("timeAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ReminderModels");
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.ServerCommands", b =>
                {
                    b.Property<decimal>("serverCommandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateModified")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("modifiedById")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("serverCommandId");

                    b.ToTable("ServerCommandModels");
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.ServerModel", b =>
                {
                    b.Property<decimal>("serverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<string>("botAdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("serverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("userIdent")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("serverId");

                    b.HasIndex("botAdminId");

                    b.ToTable("ServerModels");
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.StatModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("bank")
                        .HasColumnType("int");

                    b.Property<int>("emojiSent")
                        .HasColumnType("int");

                    b.Property<float>("experience")
                        .HasColumnType("real");

                    b.Property<int>("luck")
                        .HasColumnType("int");

                    b.Property<int>("messages")
                        .HasColumnType("int");

                    b.Property<int>("reactionsReceived")
                        .HasColumnType("int");

                    b.Property<decimal>("serverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("userId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("userLevel")
                        .HasColumnType("int");

                    b.Property<int>("wallet")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("StatModels");
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.UserDash", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("color")
                        .HasColumnType("int");

                    b.Property<decimal>("serverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("userId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("UserDashes");
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.UserExperience", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("bank")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("emojiSent")
                        .HasColumnType("int");

                    b.Property<float>("experience")
                        .HasColumnType("real");

                    b.Property<int>("luck")
                        .HasColumnType("int");

                    b.Property<int>("messages")
                        .HasColumnType("int");

                    b.Property<int>("reactionsReceived")
                        .HasColumnType("int");

                    b.Property<decimal>("serverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("userId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("userLevel")
                        .HasColumnType("int");

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("wallet")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("UserExperiences");
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("hasLinkedAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("isBotAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("slowModeEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("slowModeTime")
                        .HasColumnType("int");

                    b.Property<Guid>("userGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("userId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("userNameEntry")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ClassLibrary.Models.UserStatsModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("serverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int?>("statsid")
                        .HasColumnType("int");

                    b.Property<decimal>("userId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("id");

                    b.HasIndex("statsid");

                    b.ToTable("UserStatModels");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.CommandModel", b =>
                {
                    b.HasOne("ClassLibrary.Models.ContextModels.ServerCommands", null)
                        .WithMany("commands")
                        .HasForeignKey("ServerCommandsserverCommandId");
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.DashItem", b =>
                {
                    b.HasOne("ClassLibrary.Models.ContextModels.UserDash", null)
                        .WithMany("items")
                        .HasForeignKey("UserDashid");
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.ServerModel", b =>
                {
                    b.HasOne("ClassLibrary.Models.ContextModels.UserModel", "botAdmin")
                        .WithMany()
                        .HasForeignKey("botAdminId");

                    b.Navigation("botAdmin");
                });

            modelBuilder.Entity("ClassLibrary.Models.UserStatsModel", b =>
                {
                    b.HasOne("ClassLibrary.Models.ContextModels.StatModel", "stats")
                        .WithMany()
                        .HasForeignKey("statsid");

                    b.Navigation("stats");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ClassLibrary.Models.ContextModels.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ClassLibrary.Models.ContextModels.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Models.ContextModels.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ClassLibrary.Models.ContextModels.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.ServerCommands", b =>
                {
                    b.Navigation("commands");
                });

            modelBuilder.Entity("ClassLibrary.Models.ContextModels.UserDash", b =>
                {
                    b.Navigation("items");
                });
#pragma warning restore 612, 618
        }
    }
}
